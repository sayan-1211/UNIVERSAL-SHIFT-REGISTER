`timescale 1ns / 1ps

module Seven_segment_display(
input clk,
input [3:0]ones,
input [3:0]twos,
input [3:0]threes,
input [3:0]fours,
output reg [6:0]seg,
output reg [3:0]an
    );
 
reg [1:0] digit_display =0;
reg [6:0] display [3:0];

//Slow_clock
reg [18:0] counter=0;
parameter max_count=500000; //100MHz/100Hz=>10,00,000/2=5,00,000
wire [3:0] four_bit [3:0];

assign four_bit[0]=ones;
assign four_bit[1]=twos;
assign four_bit[2]=threes;
assign four_bit[3]=fours;

always @(posedge clk)
    begin
        if (counter<max_count)
            counter<=counter+1;
        else
            begin
                counter<=0;
                digit_display<=digit_display+1;
            end
    
        case(four_bit[digit_display])
            4'b0000 : display[digit_display] <= 7'b1000000; //0
            4'b0001 : display[digit_display] <= 7'b1111001; //1
            4'b0010 : display[digit_display] <= 7'b0100100; //2
            4'b0011 : display[digit_display] <= 7'b0110000; //3
            4'b0100 : display[digit_display] <= 7'b0011001; //4
            4'b0101 : display[digit_display] <= 7'b0010010; //5
            4'b0110 : display[digit_display] <= 7'b0000010; //6
            4'b0111 : display[digit_display] <= 7'b1111000; //7
            4'b1000 : display[digit_display] <= 7'b0000000; //8
            4'b1001 : display[digit_display] <= 7'b0010000; //9
        endcase
        
        case(digit_display)
            0:
                begin
                    an <= 4'b1110;
                    seg <= display[0];
                end
            1:
                begin
                    an <= 4'b1101;
                    seg <= display[1];
                end
            2:
                begin
                    an <= 4'b1011;
                    seg <= display[2];
                end
            3:
                begin
                    an <= 4'b0111;
                    seg <= display[3];
                end
        endcase
    end
endmodule
